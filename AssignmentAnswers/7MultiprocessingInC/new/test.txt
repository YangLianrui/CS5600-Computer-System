This is a test. A test is this file! I am quashing Long? AAAAA! ABCDEFGHIJKL. As we can see from figure 1, each philosopher has 1 fork. But every philosopher needs 2 forks when they are eating. That means a philosopher has to wait if philosophers near him/her are eating because forks are not available. The goal is to design a strategy to help these philosophers eating properly and efficiently. A wrong answer is telling each philosopher pickup a fork no matter the right one or the left one  and wait another fork. Because in some cases, when every philosopher only has one fork at the same time, every philosopher will wait for another fork forever. In computer science, this is called deadlock. Deadlock means every member within a group cannot proceed and each of them are waiting for others to stop. Members can be different computers, different processes or different threads etc. For example, when a memory fork is used by a thread philosopher, it is not available for other threads philosophers. One applicable solution is allocate a waiter for these philosophers. This waiter can organize and allocate forks and decide which philosopher can eat and which one has to wait. In computer science, this waiter should be a new thread which is used to allocate resources. Another solution is allowing philosophers eat when they want to. Sometimes, deadlock will happen when every philosopher has only 1 fork and they are waiting for others. At this moment, a manager will be involved and require a philosopher put down his/her fork forcibly. Because this philosopher releases a fork, another philosopher will have 2 forks and start eating, deadlock problem is solved. The previous solutions need a separate waiter manager to organize philosophers. There is another solution which allows philosophers organize by themselves. The deadlock will happen because it is possible that each philosopher will has 1 fork and wait at the same time. So, if we avoid this situation, the deadlock will not happen. The solution is: if we have n philosophers and n forks, tell n-1 philosophers pickup their left fork firstly. If the left fork of them is not available, they have to wait and do not pickup the right fork even if it is available. Allow 1 philosopher pickup the right fork. If the right fork is not available, he she has to wait and do not pickup the left fork even if it is available. In this case, the 1 philosopher has to campaign with the philosopher sitting on his her right side for the fork. As a result, at least 1 philosopher will have 2 forks and start eating. Deadlock will never happen!